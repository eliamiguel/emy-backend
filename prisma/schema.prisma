generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  orders    Order[]
  cartItems CartItem[]
  addresses Address[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  variants    ProductVariant[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  size      String
  color     String?
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@unique([productId, size, color])
  @@map("product_variants")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Campos para pedidos guest (sem usu√°rio)
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  customerAddress String?
  customerCity    String?
  customerZipCode String?

  // Relacionamentos (opcionais para pedidos guest)
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  addressId String?
  address   Address? @relation(fields: [addressId], references: [id])
  
  orderItems OrderItem[]
  payment    Payment?

  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)

  // Relacionamentos
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Address {
  id           String  @id @default(cuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean @default(false)

  // Relacionamentos
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  orders Order[]

  @@map("addresses")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relacionamentos
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
